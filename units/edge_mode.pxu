id: IoTR_able_to_scan_other_IoTRs_and_APs 
_summary: Verify weather IoTR is able to scan other IoTRs & APs
_description:
      this auromated-test will check  weather IoTR is able to scan other IoTRs & APs
plugin: shell
category_id: edge_mode_test
estimated_duration: 5s
command:
  echo "Command: itron-edge.netmgr -i nodeq 0" && itron-edge.netmgr -i nodeq 0
  itron-edge.netmgr -i nodeq 0 | head -1 | awk '{if($3 == 0) exit 1}'

id: IOTR_registered_to_Access_Point
_summary: verifying IoTR registerd to Access Point
_description:
      this auromated-test will verify IoTR registerd to Access Point
plugin: shell
estimated_duration: 5s
category_id: edge_mode_test
command:
  echo "Command: itron-edge.netmgr -i nodeq 0" &&  itron-edge.netmgr -i nodeq 0
  itron-edge.netmgr -i nodeq 0 | head -1 | awk '{if($3 == 0) exit 1}'

id: Time_Sync_Accuracy
_summary: Verify time sync stability after several hour of testing
_description:
      this auromated-test will verify stability of time sync after several of testing
plugin: shell
estimated_duration: 5s
category_id: edge_mode_test
command:
  echo "Command: itron-edge.netmgr -i conf timesync ts_accuracy_req" && itron-edge.netmgr -i conf timesync ts_accuracy_req
  itron-edge.netmgr -i conf timesync ts_accuracy_req | head -1 | awk '{if($8 != 1200) exit 1}' 

id: IPv4_connectivity_to_Internet 
_summary: IPv4 connectivity to Internet from connected PC
_description:
      this auromated-test will verify IPv4 connectivity to Internet from connected PC
plugin: shell
estimated_duration: 5s
category_id: edge_mode_test
command:
  echo "Checking connectivity to internet by pinging google DNS server" &&  ping -c 2 8.8.8.8
  ping -c 2 8.8.8.8 | tail -2 | head -1 | awk '{if($4 != 2) exit 1}'

id: IoTR_updates_the_timesync_information
_summary: verify the timesync is not lost during several hour of testing
_description:
      testing timesync information will not lost during several hour of testing 
      here: checking timesync information every 5 mins
plugin: shell
estimated_duration: 3600s
category_id: edge_mode_test
command:
  Time_in_sec () {
        date=$(itron-edge.netmgr -i time local | head -2 | tail -1 | awk '{print $2}')
        hr="$(cut -d':' -f1 <<<"$date")"
        min="$(cut -d':' -f2 <<<"$date")"
        sec="$(cut -d':' -f3 <<<"$date")"
        sec=`expr $hr \* 3600 + "$min" \* 60 + $sec`
        ret=$sec
  }
  s_time=300
  delta=10
  echo "Test for 1 hour"
  for i in {1..12};
  do
      Time_in_sec
      retval1=$ret
      echo "current time : $date"
      echo "waiting for $s_time s"
      sleep "$s_time"s
      Time_in_sec
  retval2=$ret
      diff=$(expr "$retval2" - "$retval1")
      if [[ $diff -gt `expr $s_time - $delta` && $diff -lt `expr $s_time + $delta` ]]; then
          echo "ok"
      else
          echo "not ok"
      fi
  done

id: Curl_to_internet_from_connected_pc
_summary: Using ‘curl’ download a file from a public internet site
_description:
    this test will download a file from a public internet site using curl
plugin: shell
estimated_duration: 5s
category_id: edge_mode_test
command:
  output=$(snap list | grep curl | awk '{print $1}')
  if [ -n $output ]
  then
    print "curl already installed" 
    echo "cd /home/manish2359/snap && curl -O https://github.com/sikilli/blob/develop/build-linux.txt && rm build-linux.txt && cd -"
    cd /home/manish2359/snap && curl -O https://github.com/sikilli/blob/develop/build-linux.txt && rm build-linux.txt && cd -
  else
    snap install curl
    echo "cd /home/manish2359 && curl -O https://github.com/sikilli/blob/develop/build-linux.txt && rm build-linux.txt && cd -"
    cd /home/manish2359 && curl -O https://github.com/sikilli/blob/develop/build-linux.txt && rm build-linux.txt && cd -
  fi
  
   
   



